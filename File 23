import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Generate Synthetic Satellite Data
def generate_synthetic_data(n_samples=1000, seed=42):
    np.random.seed(seed)
    # Simulate NDVI: higher values = more vegetation
    ndvi = np.random.uniform(0, 1, n_samples)
    # Simulate NDBI: higher values = more built-up area
    ndbi = np.random.uniform(0, 1, n_samples)
    # Simulate albedo (reflectance)
    albedo = np.random.uniform(0.1, 0.4, n_samples)
    # Simulate land cover type (categorical, encoded as integers)
    land_cover = np.random.randint(0, 5, n_samples)

    # Generate LST using a formula (synthetic)
    lst = 300 + 10 * ndbi - 7 * ndvi + 5 * albedo + np.random.normal(0, 1, n_samples)

    data = pd.DataFrame({
        'NDVI': ndvi,
        'NDBI': ndbi,
        'Albedo': albedo,
        'Land_Cover': land_cover,
        'LST': lst  # Land Surface Temperature (target)
    })
    return data

# Step 2: Load data
data = generate_synthetic_data()

# Step 3: Visualize correlations
sns.pairplot(data)
plt.suptitle('Synthetic Urban Heat Data Pairplot', y=1.02)
plt.show()

# Step 4: Prepare data for ML model
X = data[['NDVI', 'NDBI', 'Albedo', 'Land_Cover']]
y = data['LST']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Train a Machine Learning model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 6: Evaluate model
y_pred = model.predict(X_test)
print("RÂ² Score:", r2_score(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))

# Step 7: Visualize predictions
plt.figure(figsize=(8, 5))
plt.scatter(y_test, y_pred, alpha=0.6, edgecolors='k')
plt.plot([y.min(), y.max()], [y.min(), y.max()], '--r')
plt.xlabel('Actual LST')
plt.ylabel('Predicted LST')
plt.title('Actual vs Predicted Land Surface Temperature')
plt.grid(True)
plt.show()

# Optional: Feature Importance
importances = model.feature_importances_
features = X.columns
plt.barh(features, importances)
plt.title("Feature Importance in LST Prediction")
plt.xlabel("Importance Score")
plt.show()
